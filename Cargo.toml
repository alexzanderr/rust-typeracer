#
# note that this is unstable in this version of cargo
# 1.65.0-nightly (4ed54cecc 2022-08-27)
#
cargo-features = ["profile-rustflags"]

#
# Documentation for help
# https://doc.rust-lang.org/cargo/reference/manifest.html
#
[package]
name = "tty-racer"
version = "0.0.1"
edition = "2021"
authors = ["alexzanderr <alexzander.dot.dev@gmail.com>"]
description = "Typeracer TUI game written in Rust to play in the terminal."

# for the library part
documentation = "https://docs.rs/rust-typeracer"
readme = "README.md"
# this needs to be my custom website
# but for now its the same as repo website
homepage = "https://github.com/alexzanderr/rust-typeracer"
repository = "https://github.com/alexzanderr/rust-typeracer"

license = "MIT AND Apache-2.0 AND GPL3-LICENSE"

keywords = ["typeracer", "tui", "game"]

# https://crates.io/category_slugs
categories = ["command-line-utilities", "games"]

rust-version = "1.65.0"
build = "build.rs"
exclude = [
    "python_version",
    # https://github.com/rust-lang/cargo/issues/3578
    "examples/*",
    "typeracer-book",
    "static",
    # + all folders that are not going to be inlcuded in the packaged crate for crates io
]
default-run = "tty-racer"

[[bin]]
name = "tty-racer"
path = "src/main.rs"

# these would be useful for activating when
# someone is building a binary with typeracer-lib
# and maybe they dont want to compile the `music` part
# or the `statistics` part
[features]
default = [
    "music",
    "statistics"
]
# music playing in background on a separate thread
music = []
# statistics in background sent to a database on a separate thread from main
statistics = []
embedded-music = []
# for development only
time-profiler = [
]

[dependencies.core-dev]
git = "https://github.com/alexzanderr/rust-core-dev"
features = [
    "datetime",
    "traits",
    "terminal",
    "audio"
]

[dev-dependencies]
assert2.workspace = true
assert_cmd = "2.0.5"
criterion = "0.4.0"
doc-comment = "0.3.3"
pretty_assertions = "1.3.0"
quickcheck = "1.0.3"
quickcheck_macros = "1.0.0"
rstest = "0.15.0"
rstest_reuse = "0.4.0"
test-generator = "0.3.0"



# https://github.com/rust-lang/rust/blob/master/RELEASES.md#cargo
# https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-dependencies-table
# /// Dependencies from this table cannot be declared as optional
[workspace.dependencies]
# the good part is that i have the same version of crossterm for the entire workspace
# and if i manually change the version here its propagated to the entire workspace
# instead of manually changing the version of crossterm for every member of the workspace
# cool
crossterm = "0.25.0"
assert2 = "0.3.6"
colored = "2.0.0"
dotenv = "0.15.0"
soloud = "1.0.2"
rand = "0.8.5"
color-backtrace = "0.5.1"
notify = "5.0.0"
syn = "1.0.103"
quote = "1.0.21"
dbg-pls = { git = "https://github.com/alexzanderr/rust-dbg-pls-fork" }
syntect = "5.0.0"


[dependencies]
typeracer-proc-macro = { path = "./typeracer-proc-macro" }
dbg-pls = { workspace = true, features = ["pretty", "derive", "colors"] }
# builder design pattern: create a builder for your struct
derive_builder = "0.11.2"
# error management
thiserror = "1.0.37"

# string alignment
pad = "0.1.6"
# parse ansi codes from a string
ansi-parser = "0.8.0"
# random numbers
rand = { workspace = true }
# play music
soloud = { workspace = true }
# ansi + rgb colors
colored = { workspace = true }
# load env variables
dotenv = { workspace = true }
# better testing assertions
assert2 = { workspace = true }
# terminal manipulation library
crossterm = { workspace = true }
# getters and setters automatically created with derive
# but they are crap, honestly, you better write your own setters
getset = "0.1.2"
# global variables allocated at runtime
lazy_static = "1.4.0"
# unicode manipulation
# a unicode char can have between 1..4 bytes instead of 1 like a char
unicode-segmentation = "1.10.0"
notify.workspace = true
itoa = { version = "1.0.4", optional = true }
ryu = { version = "1.0.11", optional = true }
toml = "0.5.9"
dirs = "4.0.0"
serde = { version = "1.0.147", features = ["derive"] }
itertools = "0.10.5"
phf = { version = "0.11.1", features = ["macros"] }
syntect = { workspace = true }
scoped-pool = "1.0.0"
log = "0.4.17"
chrono = "0.4.23"
strip-ansi-escapes = "0.1.1"







[workspace]
members = [
    # the place where all new ideas and experimental examples are implemented
    "dev-ideas",
    # this is the docs manager
    # disabled for now
    #    "docs"
    "typeracer-proc-macro"
]
exclude = [
    "learning"
]


# Ultra performance specs
# NOTE: compilation is very long, but its worth it
[profile.release]
# https://github.com/johnthagen/min-sized-rust
# compilation takes longer here
lto = true
# compilation takes longer here too
codegen-units = 1
# optimize for speed
opt-level = 's'
# when it will panic, it will segfaults, why?
panic = "abort"
# its like strip all
strip = true  # Automatically strip symbols from the binary.
# for this you need cargo feature `cargo-features = ["profile-rustflags"]` at the top of Cargo.toml
#rustflags = ["-C", "target-cpu=native"]

[build-dependencies]
assert2.workspace = true
colored.workspace = true
string_template = "0.2.1"

# learn more about that
# https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
# incremental = false


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
